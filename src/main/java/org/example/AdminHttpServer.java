package org.example;

import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.concurrent.Executors;

public class AdminHttpServer {
    
    private final HttpServer server;
    private final int port;
    
    public AdminHttpServer(int port) throws IOException {
        this.port = port;
        
        // –ù–∞ Render.com –∏—Å–ø–æ–ª—å–∑—É–µ–º 0.0.0.0 –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º
        String bindAddress = System.getenv().getOrDefault("BIND_ADDRESS", "0.0.0.0");
        InetSocketAddress address = new InetSocketAddress(bindAddress, port);
        
        this.server = HttpServer.create(address, 0);
        setupRoutes();
        
        // –ù–∞ Render.com –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        int threadPoolSize = Integer.parseInt(System.getenv().getOrDefault("HTTP_THREAD_POOL_SIZE", "20"));
        server.setExecutor(Executors.newFixedThreadPool(threadPoolSize));
    }
    
    private void setupRoutes() {
        // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        server.createContext("/admin", new AdminPanelHandler());
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        server.createContext("/api/stats", new StatsApiHandler());
        
        // –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        server.createContext("/api/clients", new ClientsApiHandler());
        
        // –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞
        server.createContext("/api/logs", new LogsApiHandler());
        
        // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (CSS, JS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        server.createContext("/static", new StaticFileHandler());
        
        // Health check –¥–ª—è Render.com
        server.createContext("/health", new HealthCheckHandler());
        
        // –ö–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        server.createContext("/", new RootHandler());
    }
    
    public void start() {
        server.start();
        
        // –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π URL –¥–ª—è Render.com
        String externalUrl = System.getenv().getOrDefault("RENDER_EXTERNAL_URL", "http://localhost:" + port);
        
        System.out.println("=== HomeCloud Admin Server Started ===");
        System.out.println("Local port: " + port);
        System.out.println("Bind address: " + System.getenv().getOrDefault("BIND_ADDRESS", "0.0.0.0"));
        System.out.println("Admin panel: " + externalUrl + "/admin");
        System.out.println("Health check: " + externalUrl + "/health");
        System.out.println("=====================================");
    }
    
    public void stop() {
        server.stop(0);
        System.out.println("Admin HTTP server stopped");
    }
    
    // Health check –¥–ª—è Render.com
    private static class HealthCheckHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if ("GET".equals(exchange.getRequestMethod())) {
                String response = """
                    {
                        "status": "healthy",
                        "service": "HomeCloud Admin Server",
                        "timestamp": "%s",
                        "version": "1.0.0"
                    }
                    """.formatted(java.time.Instant.now());
                
                exchange.getResponseHeaders().add("Content-Type", "application/json");
                exchange.getResponseHeaders().add("Access-Control-Allow-Origin", "*");
                exchange.sendResponseHeaders(200, response.getBytes().length);
                
                try (OutputStream os = exchange.getResponseBody()) {
                    os.write(response.getBytes());
                }
            } else {
                exchange.sendResponseHeaders(405, -1);
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    private static class AdminPanelHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if ("GET".equals(exchange.getRequestMethod())) {
                try {
                    // –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
                    String htmlContent = new String(Files.readAllBytes(
                        Paths.get("src/main/resources/admin_panel.html")
                    ));
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    exchange.getResponseHeaders().add("Content-Type", "text/html; charset=UTF-8");
                    exchange.getResponseHeaders().add("Access-Control-Allow-Origin", "*");
                    exchange.sendResponseHeaders(200, htmlContent.getBytes().length);
                    
                    try (OutputStream os = exchange.getResponseBody()) {
                        os.write(htmlContent.getBytes());
                    }
                } catch (Exception e) {
                    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π HTML
                    String fallbackHtml = getFallbackHtml();
                    exchange.getResponseHeaders().add("Content-Type", "text/html; charset=UTF-8");
                    exchange.getResponseHeaders().add("Access-Control-Allow-Origin", "*");
                    exchange.sendResponseHeaders(200, fallbackHtml.getBytes().length);
                    
                    try (OutputStream os = exchange.getResponseBody()) {
                        os.write(fallbackHtml.getBytes());
                    }
                }
            } else {
                exchange.sendResponseHeaders(405, -1); // Method Not Allowed
            }
        }
        
        private String getFallbackHtml() {
            return """
                <!DOCTYPE html>
                <html>
                <head>
                    <title>HomeCloud Admin Panel</title>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <style>
                        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                        h1 { color: #667eea; text-align: center; }
                        .status { background: #d4edda; color: #155724; padding: 15px; border-radius: 5px; margin: 20px 0; }
                        .info { background: #d1ecf1; color: #0c5460; padding: 15px; border-radius: 5px; margin: 20px 0; }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <h1>üè† HomeCloud Server Admin Panel</h1>
                        <div class="status">
                            <strong>‚úÖ Server Status:</strong> Running on Render.com
                        </div>
                        <div class="info">
                            <strong>‚ÑπÔ∏è Information:</strong><br>
                            ‚Ä¢ Admin panel is operational<br>
                            ‚Ä¢ Server is ready to accept connections<br>
                            ‚Ä¢ WebSocket server is running<br>
                            ‚Ä¢ Health check endpoint: /health
                        </div>
                        <div class="info">
                            <strong>üîß Environment:</strong><br>
                            ‚Ä¢ Platform: Render.com<br>
                            ‚Ä¢ Java Version: %s<br>
                            ‚Ä¢ Server Time: %s
                        </div>
                    </div>
                </body>
                </html>
                """.formatted(
                    System.getProperty("java.version"),
                    java.time.LocalDateTime.now()
                );
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    private static class StatsApiHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if ("GET".equals(exchange.getRequestMethod())) {
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                String statsJson = """
                    {
                        "activeConnections": 0,
                        "totalRequests": 0,
                        "totalBytes": 0,
                        "uptime": 0,
                        "environment": "render.com",
                        "timestamp": "%s"
                    }
                    """.formatted(java.time.Instant.now());
                
                exchange.getResponseHeaders().add("Content-Type", "application/json");
                exchange.getResponseHeaders().add("Access-Control-Allow-Origin", "*");
                exchange.sendResponseHeaders(200, statsJson.getBytes().length);
                
                try (OutputStream os = exchange.getResponseBody()) {
                    os.write(statsJson.getBytes());
                }
            } else {
                exchange.sendResponseHeaders(405, -1);
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ API –∫–ª–∏–µ–Ω—Ç–æ–≤
    private static class ClientsApiHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if ("GET".equals(exchange.getRequestMethod())) {
                String clientsJson = """
                    {
                        "clients": [],
                        "totalClients": 0,
                        "environment": "render.com",
                        "timestamp": "%s"
                    }
                    """.formatted(java.time.Instant.now());
                
                exchange.getResponseHeaders().add("Content-Type", "application/json");
                exchange.getResponseHeaders().add("Access-Control-Allow-Origin", "*");
                exchange.sendResponseHeaders(200, clientsJson.getBytes().length);
                
                try (OutputStream os = exchange.getResponseBody()) {
                    os.write(clientsJson.getBytes());
                }
            } else {
                exchange.sendResponseHeaders(405, -1);
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ API –ª–æ–≥–æ–≤
    private static class LogsApiHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            if ("GET".equals(exchange.getRequestMethod())) {
                String logsJson = """
                    {
                        "logs": [
                            "Server started successfully on Render.com",
                            "Admin panel HTTP server running",
                            "Health check endpoint available at /health",
                            "WebSocket server ready for connections",
                            "Environment: %s"
                        ],
                        "environment": "render.com",
                        "timestamp": "%s"
                    }
                    """.formatted(
                        System.getenv().getOrDefault("RENDER_ENVIRONMENT", "production"),
                        java.time.Instant.now()
                    );
                
                exchange.getResponseHeaders().add("Content-Type", "application/json");
                exchange.getResponseHeaders().add("Access-Control-Allow-Origin", "*");
                exchange.sendResponseHeaders(200, logsJson.getBytes().length);
                
                try (OutputStream os = exchange.getResponseBody()) {
                    os.write(logsJson.getBytes());
                }
            } else {
                exchange.sendResponseHeaders(405, -1);
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    private static class StaticFileHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            String path = exchange.getRequestURI().getPath();
            String contentType = getContentType(path);
            
            try {
                byte[] content = Files.readAllBytes(Paths.get("src/main/resources" + path));
                
                exchange.getResponseHeaders().add("Content-Type", contentType);
                exchange.getResponseHeaders().add("Access-Control-Allow-Origin", "*");
                exchange.sendResponseHeaders(200, content.length);
                
                try (OutputStream os = exchange.getResponseBody()) {
                    os.write(content);
                }
            } catch (Exception e) {
                exchange.sendResponseHeaders(404, -1); // File not found
            }
        }
        
        private String getContentType(String path) {
            if (path.endsWith(".css")) return "text/css";
            if (path.endsWith(".js")) return "application/javascript";
            if (path.endsWith(".png")) return "image/png";
            if (path.endsWith(".jpg") || path.endsWith(".jpeg")) return "image/jpeg";
            if (path.endsWith(".gif")) return "image/gif";
            return "text/plain";
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
    private static class RootHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange exchange) throws IOException {
            // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            exchange.getResponseHeaders().add("Location", "/admin");
            exchange.sendResponseHeaders(302, -1); // Found (Redirect)
        }
    }
}
